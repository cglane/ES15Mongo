Documentation for Language Files

NORMAL USE:

This will be a guide on the newly built process for updating language files within GDG 2.0. This is all-inclusive, meaning it will span over all products, including Volunteer, Give and Grant.

As a development team, we are no longer placing updated language in the JSON located within the i18n directory. All updated language tokens and new keys will be placed within a CSV file located within the new “language_files” directory located in WPG.

** NOTE: IT IS IMPORTANT TO NOT CREATE DUPLICATES WITHIN THE LANGUAGE FILE. PLEASE REUSE LANGUAGE THAT ALREADY EXISTS IN THE PRODUCT. Do a project-wide search prior to any language token creation in an effort to keep the masterLang as clean as possible. **

** NOTE: IT IS JUST AS IMPORTANT TO NOT ADD ANY LEADING OR TRAILING SPACES WITHIN LANGUAGE TOKENS. Account for any spaces within the HTML or JS. **

The new updated language process is as follows:

1. Determine where your updated language belongs. If you're working within the Volunteer page in the portal, it may belong in volunteer.lang.json. Be sure to check for duplicate values first.
2. Locate the masterLang.EN.csv file located within WPG/language_files/ and open it. Within the file are three headers: area, key, en-US.
Area refers to the location of the language, such as Volunteer (as determined by our previous example)
Key refers to the actual key being referenced within the HTML (e.g., {{ 'volunteer.exampleKey | i18n }})
en-US refers to the string of text you would like to have appear within the portal once the language has been deployed
3. Add your updated language to the CSV file. Please make sure to file it in alphabetical order so they are easier to find/search for. There must be NO spaces after commas, as it will add a space before the key. Please wrap strings in double quotation marks, as well. Follow the example below:

		area,key,“en-US”
		volunteer,exampleKey,“Example”
		volunteer,exampleText,“Here's some example text, too.”

	As you can see, you are able to enter both single words and long strings as text associated with a key. The reason for the double quotations is to avoid confusion with breaks in the CSV. Commas denote a new column, so any commas that are a part of a string must be contained.

4. Grunt is configured to run the “lang” task that will build all the JSON files from the masterLang.EN.csv. This will also run when any changes to that file are detected.
5. All the i18n files will be built into the en-US folder. Check to make sure the language populates within the appropriate file. If it works, you'll see it listed within the JSON. Be sure to double-check that no spaces exist before your key or your string.

FOR CLIENT-SPECIFIC LANGUAGE:

There is a folder located within the client_files folder within the WPG directory. If there is any custom language requested by the client, it needs to be located within this file in order for the task to see the changes and apply them to the CZ.
The process is as follows:

1. Find where the language will be located, for example; if the client wants to have volunteerHours string be “Volunteer Time” instead, that would be located in the volunteer.lang.json file
2. Rebuild the JSON file within the client_files/lang_files/_clientZoneID_/_langCode_/ folder. If you are changing the English translation of the volunteer.lang.json file for AIG (12699768) place that within the following directory:

		client_files/lang_files/12699768/en-US/volunteer.lang.json

3. Only change the string. DO NOT change the key or it will not appear within the portal after deploy. You cannot add custom language here, either. The reason is, the key will not be included in the i18n JSON files because the key does not exist in the base product. This is intentional, as we do not want to deviate from standard product.

If you have any questions about the process, please ask Stuart.
